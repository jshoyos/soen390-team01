@using Microsoft.AspNetCore.Mvc.ModelBinding
@model soen390_team01.Services.IAccountingService

@{
    ViewData["Title"] = "Accounting View";
    ViewData["selectedTab"] = "";
}


<head>
    <link rel="stylesheet" href="\css\Accounting.css">
    <link rel="stylesheet" href="\css\site.css">
    <meta name="viewport" content="width=device-width" />

    <script type="text/javascript">

        function passingFilters(filters, displayedName, filterInput) {
            console.log(filters);
            console.log(displayedName);
            console.log(filterIndex);
            var list = filters.List.map(f => {
                if (f.PossibleSelectValues) {
                    f.Input = {
                        SelectInput: { SelectValue: f.Value, PossibleValues: f.PossibleSelectValues }
                    };
                } else if (f.PossibleCheckboxValues) {
                    f.Input = {
                        CheckBoxInput: { Values: f.Values, PossibleValues: f.PossibleCheckboxValues }
                    };
                } else if (f.hasOwnProperty("Value")) {
                    f.Input = { StringValue: f.Value };
                } else if (f.hasOwnProperty("Min") || f.hasOwnProperty("Max")) {
                    f.Input = {
                        RangeInput: { MinValue: !f.Min ? null : Number(f.Min), MaxValue: !f.Max ? null : Number(f.Max) }
                    };
                } else if (f.hasOwnProperty("MinDate") || f.hasOwnProperty("MaxDate")) {
                    f.Input = {
                        DateRangeInput: { MinValue: !f.MinDate ? null : f.MinDate, MaxValue: !f.MaxDate ? null : f.MaxDate }
                    };
                }
                return f;
            });

            var filterIndex = list.findIndex(f => f.DisplayColumn === displayedName);
            var modifiedFilter = list[filterIndex];
            modifiedFilter.Input = filterInput;
            list[filterIndex] = modifiedFilter;

            filters.List = list;

            $.ajax({
                url: '@Url.Action("FilterPaymentTable", "Accounting")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(filters),
                dataType: 'html',
                success: function (result) {
                    $('.accounting-view').html(result);
                    //$('.modal-backdrop').hide();
                    //$('#filterModal').modal('show');

                }
            });
        };

        function refreshFilter(type) {
        $.ajax({
            url: '@Url.Action("Refresh", "Accounting")',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(type),
            dataType: 'html',
            success: function (result) {
                $('.accounting-view').html(result);
                $('.modal-backdrop').hide();
            }
        });
        };

        function cleanNumberValue(value) {
            return value == null || value === "" ? null : Number(value);
        }

        function enforceMinMax(el) {
            if (el.value !== "") {
                if (parseInt(el.value) < parseInt(el.min)) {
                    el.value = el.min;
                }
                if (parseInt(el.value) > parseInt(el.max)) {
                    el.value = el.max;
                }
            }
        }

        function createCheckboxInput(column, possibleValues) {
            var checkBoxes = document.getElementsByName(column + "-checkbox");
            var chosenCheckBoxes = [];
            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].checked) {
                    chosenCheckBoxes.push(checkBoxes[i].value);
                }
            }
            return { CheckBoxInput: { Values: chosenCheckBoxes, PossibleValues: possibleValues } };
        };

        function cleanDateValue(value, isNew) {
            if (value == null || value === "") {
                return null;
            }
            return new Date(value);
        };
    </script>

</head>

<div class="accounting-view">
    @{await Html.RenderPartialAsync("AccountingBody", Model);}
</div>