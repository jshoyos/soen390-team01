<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] Downhill</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    @await RenderSectionAsync("Stylesheets", false)
    @await RenderSectionAsync("Scripts", required: false)
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script type="text/javascript">
        $(document).ready(function(){
            window.addEventListener('click', e => {
                if ($("#filterModal").hasClass("show") && !$(e.target).closest(".modal-content").length) {
                    hideFilterModal();
                }
            });
        });

        function hideFilterModal() {
            $("#filterModal").removeClass("show");
            $(".modal-backdrop").remove();
            $("#filterModal").fadeOut(200, () => {
                $("#filterModal").hide();
            });
        };

        function showFilter(type, mobile) {
            var filters = $(".filter-data");
            for (var i = 0; i < filters.length; i++) {
                filters[i].style.display = "none";
            }
            console.log(document.getElementById(type + "-filter"));
            document.getElementById(type + "-filter").style.display = "block";
            if (mobile) {
                document.getElementById(type + "-mobile-filter").style.display = "block";
            }
        };

        function adjustFilters(filters, displayedName, filterInput) {
            var list = filters.List.map(f => {
                if (f.PossibleSelectValues) {
                    f.Input = {
                        SelectInput: { SelectValue: f.Value, PossibleValues: f.PossibleSelectValues }
                    };
                } else if (f.PossibleCheckboxValues) {
                    f.Input = {
                        CheckBoxInput: { Values: f.Values, PossibleValues: f.PossibleCheckboxValues }
                    };
                } else if (f.hasOwnProperty("Value")) {
                    f.Input = { StringValue: f.Value };
                } else if (f.hasOwnProperty("Min") || f.hasOwnProperty("Max")) {
                    f.Input = {
                        RangeInput: { MinValue: !f.Min ? null : Number(f.Min), MaxValue: !f.Max ? null : Number(f.Max) }
                    };
                } else if (f.hasOwnProperty("MinDate") || f.hasOwnProperty("MaxDate")) {
                    f.Input = {
                        DateRangeInput: { MinValue: !f.MinDate ? null : f.MinDate, MaxValue: !f.MaxDate ? null : f.MaxDate }
                    };
                }
                return f;
            });

            var filterIndex = list.findIndex(f => f.DisplayColumn === displayedName);
            var modifiedFilter = list[filterIndex];
            modifiedFilter.Input = filterInput;
            list[filterIndex] = modifiedFilter;
            return list;
        };

        function createCheckboxInput(column, possibleValues) {
            var checkBoxes = document.getElementsByName(column + "-checkbox");
            var chosenCheckBoxes = [];

            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].checked) {
                    chosenCheckBoxes.push(checkBoxes[i].value);
                }
            }

            return { CheckBoxInput: { Values: chosenCheckBoxes, PossibleValues: possibleValues } };
        }

        function enforceMinMax(el){
            if(el.value !== ""){
                if(parseInt(el.value) < parseInt(el.min)){
                    el.value = el.min;
                }
                if(parseInt(el.value) > parseInt(el.max)){
                    el.value = el.max;
                }
            }
        }

        function cleanNumberValue(value) {
            return value == null || value === "" ? null : Number(value);
        }

        function cleanDateValue(value, isNew) {
            if (value == null || value === "") {
                return null;
            }

            return new Date(value);
        }

        function generateCsv(table_id) {
            var rows = document.querySelectorAll('table#' + table_id + ' tr');
            var csv = [];
            
            if (table_id == 'userDesktop') {
                for (var i = 0; i < rows.length; i++) {
                    var row = [], cols = rows[i].querySelectorAll('td, th');
                    for (var j = 1; j < cols.length; j++) {
                        var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                        data = data.replace(/"/g, '""');
                        row.push('"' + data + '"');
                    }
                    csv.push(row.join(','));
                }
                var csv_string = csv.join('\n');
                var filename = 'users' + '_' + new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + '.csv';
            }
            else
            {
                for (var i = 0; i < rows.length; i++) {
                    var row = [], cols = rows[i].querySelectorAll('td, th');
                    for (var j = 0; j < cols.length; j++) {
                        var data = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ')
                        data = data.replace(/"/g, '""');
                        row.push('"' + data + '"');
                    }
                    csv.push(row.join(','));
                }
                var csv_string = csv.join('\n');
                var filename = table_id + '_' + new Date().getFullYear() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getDate() + '.csv';
            }
                
            var link = document.createElement('a');
            link.style.display = 'none';
            link.setAttribute('target', '_blank');
            link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

    </script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">soen390_team01</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="UserManagement" asp-action="Index">User Management</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Inventory" asp-action="Index">Inventory</a>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link text-dark" asp-area="" asp-controller="Accounting" asp-action="index">Accounting</a>
                        </li>
                        <li>
                            <a class="nav-link text-dark" asp-area="" asp-controller="Transfers" asp-action="Index">Transfers</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Authentication" asp-action="Logout">Logout</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        @if (TempData["errorMessage"] != null)
        {
            await Html.RenderPartialAsync("_ErrorMessage", TempData["errorMessage"]);
            TempData["errorMessage"] = null;
        }
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
<footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2021 - soen390_team01
        </div>
    </footer>
</body>
</html>
