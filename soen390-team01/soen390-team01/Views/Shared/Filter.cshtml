@using Newtonsoft.Json
@using soen390_team01.Data.Queries
@model Filters

<link rel="stylesheet" href="\css\Filter.css">

<div id="@Model.Table-filter">
    <h1 class="display-4">Filter</h1>
    @foreach (var filter in Model.List)
    {
        <p><strong>@filter.DisplayColumn</strong></p>
        if (filter.GetType() == typeof(SelectFilter))
        {
            <select onchange="passingFilters(@JsonConvert.SerializeObject(@Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { SelectInput: { SelectValue: this.value, PossibleValues: @JsonConvert.SerializeObject(((SelectFilter)filter).PossibleSelectValues) } }, @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))">
                <option value="" selected></option>

                @foreach (var item in ((SelectFilter)filter).PossibleSelectValues)
                {
                    if (((SelectFilter)filter).Value == item)
                    {
                        <option value="@item" selected>@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }
                }
            </select>
            <br /><br />
        }
        else if (filter.GetType() == typeof(CheckboxFilter))
        {
            @foreach (var item in ((CheckboxFilter)filter).PossibleCheckboxValues)
            {
                <label>@item</label>
                if (((CheckboxFilter)filter).Values.Contains(item))
                {
                    <input type="checkbox" name="@(ViewData["Mobile"] != null && (bool)ViewData["Mobile"] ? "mobile-":  "")@filter.DisplayColumn-@Model.Tab-checkbox" id="@item-cb" value="@item" checked="checked"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject((ViewData["Mobile"] != null && (bool)ViewData["Mobile"] ? "mobile-":  "") + @filter.DisplayColumn + $"-{@Model.Tab}"), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)), @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
                }
                else
                {
                    <input type="checkbox" name="@(ViewData["Mobile"] != null && (bool)ViewData["Mobile"] ? "mobile-":  "")@filter.DisplayColumn-@Model.Tab-checkbox" id="@item-cb" value="@item"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject((ViewData["Mobile"] != null && (bool)ViewData["Mobile"] ? "mobile-":  "") + @filter.DisplayColumn + $"-{@Model.Tab}"), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)), @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
                }
                <br />
            }
            <br />
        }
        else if (filter.GetType() == typeof(StringFilter))
        {
            <input type="text" value="@(((StringFilter)filter).Value)" onchange="passingFilters(@JsonConvert.SerializeObject(Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { StringValue: this.value })" />
            <br /><br />
        }
        else if (filter.GetType() == typeof(RangeFilter))
        {
            <input type="number" class="price-text" min="-1000000" max="1000000"
                   value="@(((RangeFilter)filter).Min)"
                   onkeyup="enforceMinMax(this)"
                   onchange="passingFilters(@JsonConvert.SerializeObject(Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { RangeInput: { MinValue: cleanNumberValue(this.value), MaxValue: cleanNumberValue(@JsonConvert.SerializeObject(((RangeFilter)filter).Max)) } }, @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
            <span>To</span>
            <input type="number" class="price-text" min="-1000000" max="1000000"
                   value="@(((RangeFilter)filter).Max)"
                   onkeyup="enforceMinMax(this)"
                   onchange="passingFilters(@JsonConvert.SerializeObject(Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { RangeInput: { MinValue: cleanNumberValue(@JsonConvert.SerializeObject(((RangeFilter)filter).Min)), MaxValue: cleanNumberValue(this.value) } }, @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
            <br /><br />
        }
        else if (filter.GetType() == typeof(DateRangeFilter))
        {
            <div>From</div>
            <input 
                style="max-width: 200px;"
                type="datetime-local"
                value="@(((DateRangeFilter)filter).MinDate != null ? ((DateTime)((DateRangeFilter)filter).MinDate!).AddHours(-5).ToString("yyyy-MM-ddTHH:mm:ss") : "")"
                onchange="passingFilters(@JsonConvert.SerializeObject(Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { DateRangeInput: { MinValue: cleanDateValue(this.value, true), MaxValue: cleanDateValue(@(JsonConvert.SerializeObject(((DateRangeFilter)filter).MaxDate)), false) } }, @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
            <br/>
            <div>To</div>
            <input 
                style="max-width: 200px;"
                type="datetime-local"
                value="@(((DateRangeFilter)filter).MaxDate != null ? ((DateTime)((DateRangeFilter)filter).MaxDate!).AddHours(-5).ToString("yyyy-MM-ddTHH:mm:ss") : "")"
                onchange="passingFilters(@JsonConvert.SerializeObject(Model), @JsonConvert.SerializeObject(filter.DisplayColumn), { DateRangeInput: { MinValue: cleanDateValue(@(JsonConvert.SerializeObject(((DateRangeFilter)filter).MinDate)), false), MaxValue: cleanDateValue(this.value, true) } }, @JsonConvert.SerializeObject(((bool?) ViewData["Mobile"] ?? false)))" />
            <br/><br/>
        }
    }
    <br /><br />
    <input type="button" value="Clear" onclick="refreshFilter(@JsonConvert.SerializeObject(Model.Tab), @JsonConvert.SerializeObject((bool?) ViewData["Mobile"] ?? false)), showFilter(@JsonConvert.SerializeObject(Model.Tab))">
</div>
