@model soen390_team01.Services.IInventoryService
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Inventory";
    ViewData["selectedTab"] = "";
}

<head id="head">
    <title>Inventory</title>

    <link rel="stylesheet" href="\css\Inventory.css">

    <script type="text/javascript">
        function changeQuantity(inv, change) {
            inv.Quantity += change;
            $.ajax({
                url: '@Url.Action("ChangeQuantity", "Inventory")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(inv),
                dataType: 'html',
                success: function (result) {
                    $('.itemRow' + inv.InventoryId).html(result);
                },
                fail: function (result) {
                    alert("You don't have the permission required")
                }
            });
        };

        function passingFilters(filters, displayedName, filterInput) {
            var list = filters.List.map(f => {
                if (f.PossibleSelectValues) {
                    f.Input = {
                        SelectInput: { SelectValue: f.Value, PossibleValues: f.PossibleSelectValues }
                    };
                } else if (f.PossibleCheckboxValues) {
                    f.Input = {
                        CheckBoxInput: { Values: f.Values, PossibleValues: f.PossibleCheckboxValues }
                    };
                } else if (f.hasOwnProperty("Value")) {
                    f.Input = { StringValue: f.Value };
                } else if (f.hasOwnProperty("Min") || f.hasOwnProperty("Max")) {
                    f.Input = {
                        RangeInput: { MinValue: !f.Min ? null : Number(f.Min), MaxValue: !f.Max ? null : Number(f.Max) }
                    };
                } else if (f.hasOwnProperty("MinDate") || f.hasOwnProperty("MaxDate")) {
                    f.Input = {
                        DateRangeInput: { MinValue: !f.MinDate ? null : f.MinDate, MaxValue: !f.MaxDate ? null : f.MaxDate }
                    };
                }
                return f;
            });

            var filterIndex = list.findIndex(f => f.DisplayColumn === displayedName);
            var modifiedFilter = list[filterIndex];
            modifiedFilter.Input = filterInput;
            list[filterIndex] = modifiedFilter;

            filters.List = list;

            $.ajax({
                url: '@Url.Action("FilterProductTable", "Inventory")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(filters),
                dataType: 'html',
                success: function (result) {
                    $('.inventory-view').html(result);
                }
            });
        };

        function refreshFilter(type) {
            $.ajax({
                url: '@Url.Action("Refresh", "Inventory")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(type),
                dataType: 'html',
                success: function (result) {
                    $('.inventory-view').html(result);
                }
            });
        };

        function createCheckboxInput(column, possibleValues) {
            var checkBoxes = document.getElementsByName(column + "-checkbox");
            var chosenCheckBoxes = [];

            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].checked) {
                    chosenCheckBoxes.push(checkBoxes[i].value);
                }
            }

            return { CheckBoxInput: { Values: chosenCheckBoxes, PossibleValues: possibleValues } };
        }

        function enforceMinMax(el){
            if(el.value !== ""){
                if(parseInt(el.value) < parseInt(el.min)){
                    el.value = el.min;
                }
                if(parseInt(el.value) > parseInt(el.max)){
                    el.value = el.max;
                }
            }
        }

        function cleanNumberValue(value) {
            return value == null || value === "" ? null : Number(value);
        }

        function cleanDateValue(value, isNew) {
            if (value == null || value === "") {
                return null;
            }

            return new Date(value);
        }

    </script>
    <script>
        function openTab(evt, tableName) {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace("active", "");
            }
            // Show the current tab, and add an "active" class to the button that opened the tab
            console.log(document.getElementById(tableName))
            document.getElementById(tableName).style.display = "block";
            evt.currentTarget.className += " active";

            document.getElementById("inventory-filter").style.display = "none";
            document.getElementById("bike-filter").style.display = "none";
            document.getElementById("part-filter").style.display = "none";
            document.getElementById("material-filter").style.display = "none";
            document.getElementById(tableName + "-filter").style.display = "block";
        }
        function hideFilter() {
            // Declare all variables
            var i, tabcontent;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("filer-data");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
        }
        function showFilter(type) {

            document.getElementById(type + "-filter").display = "block";
        }
    </script>
</head>

<div class="container">
    <div class="row">
        <div class="col-8">
            @{await Html.RenderPartialAsync("InventoryBody", Model);}
        </div>
        <div class="col-3 filter">
            <div id="Bike-filter" class="filer-data" style="display:@(Model.SelectedTab == "Bike" ? "block": "none")">
                @{await Html.RenderPartialAsync("Filter", Model.BikeFilters);}
                <input class="filter-data" type="submit" value="Clear Filter" onclick="refreshFilter('Bike'),showFilter('Bike')">
            </div>
            <div id="Part-filter" class="filer-data" style="display:@(Model.SelectedTab == "Part" ? "block": "none")">
                @{await Html.RenderPartialAsync("Filter", Model.PartFilters);}
                <input class="filter-data" type="submit" value="Clear Filter" onclick="refreshFilter('Part'),showFilter('Part')">
            </div>
            <div id="Material-filter" class="filer-data" style="display:@(Model.SelectedTab == "Material" ? "block": "none")">
                @{await Html.RenderPartialAsync("Filter", Model.MaterialFilters);}
                <input class="filter-data" type="submit" value="Clear Filter" onclick="refreshFilter('Material'),showFilter('Material')">
            </div>

        </div>
    </div>
    
</div>
