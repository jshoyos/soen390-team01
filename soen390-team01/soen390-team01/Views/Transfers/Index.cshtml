@using Microsoft.AspNetCore.Mvc.ModelBinding
@model soen390_team01.Services.ITransferService

@{
    ViewData["Title"] = "Transfers";
}
<head>
    <title>Transfers</title>

    <link rel="stylesheet" href="\css\Transfers.css">
    <meta name="viewport" content="width=device-width" />
    <script>
        function showButton() {
            document.getElementById("procbutton").style.display = "";
        }

        function hideButton() {
            document.getElementById("procbutton").style.display = "none";
        }

        function showFilter() {
            document.getElementById("ofilter").style.display = "none";
            document.getElementById("ofilterM").style.display = "none";
            document.getElementById("pfilter").style.display = "";
            document.getElementById("pfilterM").style.display = "";
        }

        function hideFilter() {
            document.getElementById("pfilter").style.display = "none";
            document.getElementById("pfilterM").style.display = "none";
            document.getElementById("ofilterM").style.display = "";
            document.getElementById("ofilter").style.display = "";
        }

        function passingFilters(filters, displayedName, filterInput) {
            if (filters == null || (displayedName != "submit" && filterInput != "submit")) {
                var list = filters.List.map(f => {
                    if (f.PossibleSelectValues) {
                        f.Input = {
                            SelectInput: { SelectValue: f.Value, PossibleValues: f.PossibleSelectValues }
                        };
                    } else if (f.PossibleCheckboxValues) {
                        f.Input = {
                            CheckBoxInput: { Values: f.Values, PossibleValues: f.PossibleCheckboxValues }
                        };
                    } else if (f.hasOwnProperty("Value")) {
                        f.Input = { StringValue: f.Value };
                    } else if (f.hasOwnProperty("Min") || f.hasOwnProperty("Max")) {
                        f.Input = {
                            RangeInput: { MinValue: !f.Min ? null : Number(f.Min), MaxValue: !f.Max ? null : Number(f.Max) }
                        };
                    } else if (f.hasOwnProperty("MinDate") || f.hasOwnProperty("MaxDate")) {
                        f.Input = {
                            DateRangeInput: { MinValue: !f.MinDate ? null : f.MinDate, MaxValue: !f.MaxDate ? null : f.MaxDate }
                        };
                    }
                    return f;
                });

                var filterIndex = list.findIndex(f => f.DisplayColumn === displayedName);
                var modifiedFilter = list[filterIndex];
                modifiedFilter.Input = filterInput;
                list[filterIndex] = modifiedFilter;
                console.log("test");
                filters.List = list;
            }
            
            $.ajax({
                url: '@Url.Action("FilterTransferTable", "Transfers")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(filters),
                dataType: 'html',
                success: function (result) {
                    $("#filterModal").modal('hide');
                    $('.transfer-view').html(result);
                    
                }
            });
            
        };
        function refreshFilter(type) {

            $.ajax({
                url: '@Url.Action("Refresh", "Transfers")',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(type),
                dataType: 'html',
                success: function (result) {
                    $('.transfer-view').html(result);
                    if (type == "procurement") {
                        showFilter();
                    }
                    else {
                        hideFilter();
                    }
                }
            });

        };



        function createCheckboxInput(column, possibleValues) {
            var checkBoxes = document.getElementsByName(column + "-checkbox");
            var chosenCheckBoxes = [];

            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].checked) {
                    chosenCheckBoxes.push(checkBoxes[i].value);
                }
            }

            return { CheckBoxInput: { Values: chosenCheckBoxes, PossibleValues: possibleValues } };
        }
        function cleanDateValue(value, isNew) {
            if (value == null || value === "") {
                return null;
            }

            return new Date(value);
        }
        function enforceMinMax(el) {
            if (el.value !== "") {
                if (parseInt(el.value) < parseInt(el.min)) {
                    el.value = el.min;
                }
                if (parseInt(el.value) > parseInt(el.max)) {
                    el.value = el.max;
                }
            }
        }

    </script>
</head>

<div class="transfer-view">
    @{await Html.RenderPartialAsync("TransferBody", Model);}
</div>
