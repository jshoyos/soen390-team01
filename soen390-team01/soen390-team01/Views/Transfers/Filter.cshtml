@using Newtonsoft.Json
@model soen390_team01.Models.TransfersModel
@using soen390_team01.Data.Queries



<!--/Filter area-->
<!-- Vendor info for procurement tab filter-->
<div class="pb-4 justify-content-center" id="pfilter" style="display: none;">
    @foreach (var filter in Model.ProcurementFilters.List)
    {
        <p><strong>@filter.DisplayColumn</strong></p>
        if (filter.GetType() == typeof(SelectFilter))
        {
            <select onchange="passingFilters(@JsonConvert.SerializeObject(@Model.ProcurementFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), { SelectInput: { SelectValue: this.value, PossibleValues: @JsonConvert.SerializeObject(((SelectFilter)filter).PossibleSelectValues) } })">

                <option value="" selected></option>

                @foreach (var item in ((SelectFilter)filter).PossibleSelectValues)
                {
                    if (((SelectFilter)filter).Value == item)
                    {
                        <option value="@item" selected>@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }
                }
            </select>
            <br /><br />
        }
        else if (filter.GetType() == typeof(CheckboxFilter))
        {
            @foreach (var item in ((CheckboxFilter)filter).PossibleCheckboxValues)
            {
                <label>@item</label>
                if (((CheckboxFilter)filter).Values.Contains(item))
                {
                    <input type="checkbox" name="@filter.DisplayColumn-checkbox" id="@item" value="@item" checked="checked"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model.ProcurementFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject(@filter.DisplayColumn), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)))" />
                }
                else
                {
                    <input type="checkbox" name="@filter.DisplayColumn-checkbox" id="@item" value="@item"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model.ProcurementFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject(@filter.DisplayColumn), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)))" />
                }
                <br />
            }
            <br />
        }

    }

    <div class="row justify-content-center pt-3">
        <button class="btn btn-primary" data-toggle="modal" data-target="#procModal">Add Procurement</button>
    </div>
</div>
<!-- /Vendor info for procurement tab filter-->
<div id="ofilter" style="display:block">
    @foreach (var filter in Model.OrderFilters.List)
    {
        <p><strong>@filter.DisplayColumn</strong></p>
        if (filter.GetType() == typeof(SelectFilter))
        {
            <select onchange="passingFilters(@JsonConvert.SerializeObject(@Model.OrderFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), { SelectInput: { SelectValue: this.value, PossibleValues: @JsonConvert.SerializeObject(((SelectFilter)filter).PossibleSelectValues) } })">
                <option value="" selected></option>

                @foreach (var item in ((SelectFilter)filter).PossibleSelectValues)
                {
                    if (((SelectFilter)filter).Value == item)
                    {
                        <option value="@item" selected>@item</option>
                    }
                    else
                    {
                        <option value="@item">@item</option>
                    }
                }
            </select>
            <br /><br />
        }
        else if (filter.GetType() == typeof(CheckboxFilter))
        {
            @foreach (var item in ((CheckboxFilter)filter).PossibleCheckboxValues)
            {
                <label>@item</label>
                if (((CheckboxFilter)filter).Values.Contains(item))
                {
                    <input type="checkbox" name="@filter.DisplayColumn-checkbox" id="@item" value="@item" checked="checked"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model.OrderFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject(@filter.DisplayColumn), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)))" />
                }
                else
                {
                    <input type="checkbox" name="@filter.DisplayColumn-checkbox" id="@item" value="@item"
                           onclick="passingFilters(@JsonConvert.SerializeObject(@Model.OrderFilters), @JsonConvert.SerializeObject(filter.DisplayColumn), createCheckboxInput(@JsonConvert.SerializeObject(@filter.DisplayColumn), @JsonConvert.SerializeObject(((CheckboxFilter)filter).PossibleCheckboxValues)))" />
                }
                <br />
            }
            <br />
        }
    }
</div>
